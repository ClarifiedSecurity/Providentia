%li.py-4{id: dom_id(network_interface)}
  .flex.gap-3.group.relative
    = form_with(model: [network_interface.exercise, network_interface.virtual_machine, network_interface], class: 'flex-auto', data: { controller: 'model', action: "change->model#update"}) do |form|
      %fieldset.flex.gap-6{disabled:}
        .flex-auto
          = form.label :network_id, class: 'block font-bold text-gray-700 dark:text-gray-200', for: "#{dom_id(network_interface)}_network"
          - cache(['network_select', network_interface.cache_key_with_version, network_collection_scope.cache_key_with_version]) do
            = form.select :network_id, network_options_for_select, { include_blank: !network_interface.persisted? }, { id: "#{dom_id(network_interface)}_network", disabled: !helpers.allowed_to?(:update?, network_interface.virtual_machine), data: { controller: 'select' }}

        - if network_interface.persisted?
          .pt-7.flex.items-center.gap-2
            = form.label :egress, class: 'font-bold text-gray-700 dark:text-gray-200' do
              %i.fas.fa-cloud-upload-alt.text-sm
              = NetworkInterface.human_attribute_name(:egress)
            %label.inline-flex.items-center.cursor-pointer
              = form.check_box :egress, class: 'sr-only peer', disabled:, id: "#{dom_id(network_interface)}_egress"
              .relative.w-11.h-6.bg-gray-200.peer-focus:outline-hidden.peer-focus:ring-4.peer-focus:ring-blue-300.dark:peer-focus:ring-blue-800.rounded-full.peer.dark:bg-gray-700.peer-checked:after:translate-x-full.peer-checked:rtl:after:-translate-x-full.peer-checked:after:border-white.after:absolute.after:bg-white.after:border-gray-300.after:border.after:rounded-full.after:w-5.after:h-5.after:transition-all.dark:border-gray-600.peer-checked:bg-blue-600{class: "after:content-[''] after:top-[2px] after:start-[2px]"}
            - if addresses.any?(:connection?)
              %span.block.font-bold.text-gray-700.dark:text-gray-200.pl-6
                %i.fas.fa-satellite-dish.text-sm
                Connection interface

    - if network_interface.persisted?
      = form_with(url: [network_interface.exercise, network_interface.virtual_machine, network_interface], method: :delete, class: 'opacity-0 group-hover:opacity-100 transition-opacity absolute top-0 right-0 h-6 w-6 text-right', data: { turbo_confirm: 'Are you sure?' }) do |form|
        %button{type: 'submit'}
          %i.fas.fa-times-circle.text-red-500

  - if network_interface.persisted?
    .flex.w-full.items-center.gap-x-2.py-3
      %h2.text-xl.font-semibold Addresses

      - if !disabled && network_interface.persisted?
        .grow.text-right.space-x-2
          = form_with(url: [network_interface.exercise, network_interface.virtual_machine, network_interface, network_interface.addresses.build]) do |form|
            %button.form-submit-add.text-sm{type: 'submit'}
              %i.fas.fa-plus.self-center
              Add address

    .border.border-gray-200.dark:border-gray-500{data: { controller: 'model' }}
      .bg-white.dark:bg-gray-600.divide-y-4.divide-double.divide-gray-200.dark:divide-gray-800{id: "#{dom_id(network_interface)}_addresses"}
        = render collection: addresses, partial: 'addresses/address', as: :address, cached: ->(address) { ['form', disabled, address.cache_key_with_version, address.network.cache_key_with_version, allowed_to?(:read, address.network), allowed_to?(:destroy, address)] }, locals: { network_interface:, disabled: }

  - else
    .p-10.text-center.opacity-80
      .text-2xl
        Select a backing network to save this interface
      .text-xl
        After saving, addresses can be assigned