- if @virtual_machines.any?
  = render TableComponent.new do |c|
    - c.with_column { VirtualMachine.human_attribute_name(:name) }
    - c.with_column { CustomizationSpec.human_attribute_name(:fqdn) }
    - c.with_column { '' }
    - c.with_column { '' }

    - @virtual_machines.each do |machine|
      - has_second_row = machine.customization_specs.size > 1 || machine.customization_specs.flat_map(&:tags).size.positive? && allowed_to?(:read_tags?, machine.host_spec)
      - c.with_table_row(id: dom_id(machine, 'first'), classes: "group #{'border-b-0!' if has_second_row}") do
        - cache([machine.exercise.cache_key_with_version, machine.cache_key_with_version, machine.actor&.cache_key_with_version, 'index_fragment_name']) do
          %td.px-5.py-3
            .flex.flex-row.items-center.gap-x-2
              = render ActorAvatarComponent.new(actor: machine.actor)
              = link_to machine.name, [machine.exercise, machine], class: 'text-indigo-600 hover:text-indigo-900 dark:text-indigo-400 dark:hover:text-indigo-200 grow', data: { turbo_frame: '_top'}

              - if machine.custom_instance_count.to_i > 1
                %span.rounded-full.mx-1.py-1.px-2.bg-green-100.text-green-500.whitespace-nowrap
                  = machine.custom_instance_count
                  instances

        - cache([machine.exercise.cache_key_with_version, machine.cache_key_with_version, machine.actor&.cache_key_with_version, 'index_fragment_fqdn']) do
          %td.px-5.py-3= render LiquidFQDNComponent.new({ vm: machine }, object: machine.host_spec)

        - cache([machine.exercise.cache_key_with_version, machine.cache_key_with_version, machine.actor&.cache_key_with_version, 'index_fragment_buttons']) do
          %td.px-5.py-3
            = render ModalComponent.new(only_body: true) do |c|
              - c.with_body do
                = turbo_frame_tag [machine.id, 'addresses'], src: [:address_preview, @exercise, machine], loading: "lazy"
              .flex.items-center
                .inline-flex.-space-x-0.divide-x.divide-zinc-400.overflow-hidden.rounded-lg.border.border-zinc-400.shadow-sm.dark:shadow-slate-400.empty:hidden<
                  - if machine.connection_nic
                    %div.inline-flex.items-center.space-x-2.px-3.py-2.text-center.text-sm.font-medium.shadow-sm.font-medium.text-slate-700.bg-transparent.hover:bg-slate-700.hover:text-white.focus:z-10.focus:ring-2.focus:ring-gray-500.focus:bg-gray-900.focus:text-white.dark:border-white.dark:text-white.dark:hover:text-white.dark:hover:bg-gray-700.dark:focus:bg-gray-700{data: { controller: 'clipboard', clipboard_success_content_value: '<i>âœ“</i>'}}
                      %span.whitespace-nowrap{data: {controller: 'tooltip', tooltip: 'Connection address'}}
                        %span{ data: { action: "mouseenter->tooltip#show mouseleave->tooltip#hide" }}
                          %i.fas.fa-satellite-dish
                          = render(LiquidAddressComponent.new({ actor: machine.numbered_actor }, object: machine.connection_address))
                        - if machine.connection_address.fixed?
                          %span.hidden{data: {clipboard_target: 'source'}}<
                            = machine.connection_address.ip_object.to_s
                          %button.px-2{type: "button", data: {clipboard_target: 'button', action: "clipboard#copy"}}
                            %i.fas.fa-clipboard
                      = link_to 'javascript:;', class: 'text-white bg-linear-to-r from-purple-500 to-pink-500 hover:bg-linear-to-l focus:ring-4 focus:outline-hidden focus:ring-purple-200 dark:focus:ring-purple-800 font-medium rounded-lg text-xs text-center px-2 py-1 whitespace-nowrap', data: { action: "click->modal#open" } do
                        Addresses
                        %i.fas.fa-up-right-from-square
                  - if machine.description.present?
                    %span.inline-flex.items-center.px-3.py-2.text-center.text-sm.font-medium.shadow-sm.font-medium.text-slate-700.bg-transparent.hover:bg-slate-700.hover:text-white.focus:z-10.focus:ring-2.focus:ring-gray-500.focus:bg-gray-900.focus:text-white.dark:border-white.dark:text-white.dark:hover:text-white.dark:hover:bg-gray-700.dark:focus:bg-gray-700{data: {controller: 'tooltip', tooltip: machine.description}}
                      %i.fas.fa-fw.fa-file-lines{ data: { action: "mouseenter->tooltip#show mouseleave->tooltip#hide" }}
                  - if machine.customization_specs.flat_map(&:capabilities).any?
                    %span.inline-flex.items-center.px-3.py-2.text-center.text-sm.font-medium.shadow-sm.font-medium.text-slate-700.bg-transparent.hover:bg-slate-700.hover:text-white.focus:z-10.focus:ring-2.focus:ring-gray-500.focus:bg-gray-900.focus:text-white.dark:border-white.dark:text-white.dark:hover:text-white.dark:hover:bg-gray-700.dark:focus:bg-gray-700{data: {controller: 'tooltip', tooltip: machine.customization_specs.flat_map(&:capabilities).flat_map(&:name).join(', ')}}
                      %i.fas.fa-fw{class: Capability.to_icon, data: { action: "mouseenter->tooltip#show mouseleave->tooltip#hide" }}
                  - if machine.host_spec.user
                    %span.inline-flex.items-center.px-3.py-2.text-center.text-sm.font-medium.shadow-sm.font-medium.text-slate-700.bg-transparent.hover:bg-slate-700.hover:text-white.focus:z-10.focus:ring-2.focus:ring-gray-500.focus:bg-gray-900.focus:text-white.dark:border-white.dark:text-white.dark:hover:text-white.dark:hover:bg-gray-700.dark:focus:bg-gray-700{data: {controller: 'tooltip', tooltip: machine.host_spec.user.name}}
                      %i.fas.fa-fw.fa-user-tag{ data: { action: "mouseenter->tooltip#show mouseleave->tooltip#hide" }}
                  - if machine.operating_system
                    %span.inline-flex.items-center.px-3.py-2.text-center.text-sm.font-medium.shadow-sm.font-medium.text-slate-700.bg-transparent.hover:bg-slate-700.hover:text-white.focus:z-10.focus:ring-2.focus:ring-gray-500.focus:bg-gray-900.focus:text-white.dark:border-white.dark:text-white.dark:hover:text-white.dark:hover:bg-gray-700.dark:focus:bg-gray-700{data: {controller: 'tooltip', tooltip: machine.operating_system.name}}
                      %i.fas.fa-fw{class: machine.operating_system.to_icon, data: { action: "mouseenter->tooltip#show mouseleave->tooltip#hide" }}

        %td.px-5.py-3.w-10
          - if allowed_to?(:destroy?, machine)
            = link_to [machine.exercise, machine], data: { turbo_method: 'delete', turbo_confirm: 'Are you sure?' }, class: 'opacity-0 group-hover:opacity-100 transition-opacity' do
              %i.fas.fa-times-circle.text-red-600

      - if has_second_row
        - c.with_table_row(classes: '!border-t-0', id: dom_id(machine, 'fqdn')) do
          - cache([machine.exercise.cache_key_with_version, machine.cache_key_with_version, 'index_fragment_2', allowed_to?(:read_tags?, machine.host_spec)]) do
            %td.px-5.pb-3{colspan: 10}
              .flex.flex-row.gap-x-8.items-center
                - if machine.customization_specs.size > 1
                  %div
                    .w-full.text-xs Customization specs
                    = render ChipComponent.with_collection(machine.customization_specs.mode_container.map(&:name), icon: 'book')
                - if allowed_to?(:read_tags?, machine.host_spec) && machine.customization_specs.flat_map(&:tags).size.positive?
                  %div
                    .w-full.text-xs Tag list
                    = render ChipComponent.with_collection(machine.customization_specs.flat_map(&:tags).map(&:name).uniq, flavor: 'cyan', icon: 'tags')

- else
  = render 'shared/empty', klass: VirtualMachine