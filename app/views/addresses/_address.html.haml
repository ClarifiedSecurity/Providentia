%article[address]
  = form_with(model: @address_form || AddressForm.new(address), url: [address.exercise, address.virtual_machine, address.network_interface, address], class: 'hidden', id: dom_id(address, :secondary)) do
    &nbsp;
  = form_with(model: @address_form || AddressForm.new(address), url: [address.exercise, address.virtual_machine, address.network_interface, address], class: 'p-3 group', data: { action: "change->model#update"}) do |form|
    %fieldset{disabled:}
      .flex.gap-3.items-center
        %div
          = form.label :ip_family, class: 'block font-bold text-gray-700 dark:text-gray-200'
          %ul.grid.grid-flow-col.shadow.mt-1.border.border-gray-300.rounded-md.dark:bg-gray-500.dark:border-black
            %li
              = form.radio_button :ip_family, :ipv4, class: 'hidden peer', id: "#{dom_id(address)}_ip_family_ipv4"
              = form.label :ip_family, for: "#{dom_id(address)}_ip_family_ipv4", class: 'block select-none cursor-pointer rounded p-2 peer-checked:bg-blue-500 dark:peer-checked:bg-blue-600 peer-checked:text-white text-center' do
                IPv4
            %li
              = form.radio_button :ip_family, :ipv6, class: 'hidden peer', id: "#{dom_id(address)}_ip_family_ipv6"
              = form.label :ip_family, for: "#{dom_id(address)}_ip_family_ipv6", class: 'block select-none cursor-pointer rounded p-2 peer-checked:bg-blue-500 dark:peer-checked:bg-blue-600 peer-checked:text-white text-center' do
                IPv6

        .w-60
          = form.label :mode, class: 'block font-bold text-gray-700 dark:text-gray-200', for: "#{dom_id(address)}_mode" do
            = Address.human_attribute_name(:mode)
          = form.select :mode, form.object.available_modes, { include_blank: false }, { id: "#{dom_id(address)}_mode", disabled: ,data: { controller: 'select' } }

        - if address.needs_pool? && address.network.address_pools.for_address(address).size > 1
          %div
            = form.label :address_pool_id, class: 'block font-bold text-gray-700 dark:text-gray-200'
            = form.collection_select :address_pool_id, address.network.address_pools.for_address(address), :id, :name, { include_blank: address.address_pool.nil? }, { data: { controller: 'select' }, disabled: disabled || (address.address_pool && address.network.address_pools.for_address(address).size == 1) }

        .grow
          .flex
            .grow
              = form.label :offset, class: 'block font-bold text-gray-700 dark:text-gray-200', for: "#{dom_id(address)}_offset" do
                = Address.human_attribute_name(:offset)
            - if address.fixed? && allowed_to?(:update?, address)
              %button.text-white.bg-gradient-to-r.from-cyan-500.to-blue-500.hover:bg-gradient-to-bl.focus:ring-4.focus:outline-none.focus:ring-cyan-300.dark:focus:ring-cyan-800.font-medium.rounded-lg.text-sm.px-2.text-center{class: "py-0", type: "submit", name: "address[randomize_address]", form: dom_id(address, :secondary)}
                %i.fas.fa-dice
                Randomize

          - case address.mode
          - when "ipv4_static"
            - if address.address_pool.present? && address.address_pool.ip_network
              .mt-1= render IPPickerComponent.new(form: form, field: :offset, hosts: :available_for_object, label: false)

          - when "ipv4_vip"
            - if address.address_pool.present? && address.address_pool.ip_network
              .mt-1= render IPPickerComponent.new(form: form, field: :offset, hosts: :all, label: false)

          - when "ipv6_static", "ipv6_linklocal", "ipv6_uniqlocal", "ipv6_vip"
            - if address.mode_ipv6_uniqlocal? || address.mode_ipv6_linklocal? || address.address_pool&.ip_network.present?
              .mt-1.flex.rounded-md.shadow-sm.grow
                %span.inline-flex.items-center.px-3.rounded-l-md.border.border-r-0.border-gray-300.bg-gray-50.text-gray-500.dark:bg-gray-600.dark:text-current.dark:border-black.text-sm
                  = render LiquidAddressNetworkSansPrefixComponent.new(object: address)
                = form.text_field :ipv6_address_input, class: 'focus:ring-indigo-500 focus:border-indigo-500 flex-1 block w-full sm:text-sm border-gray-300 dark:bg-gray-500 dark:border-black disabled:cursor-not-allowed disabled:opacity-75', autocomplete: "off"
                %span.inline-flex.items-center.px-3.rounded-r-md.border.border-l-0.border-gray-300.bg-gray-50.text-gray-500.dark:bg-gray-600.dark:text-current.dark:border-black.text-sm<
                  = "/#{address.ip_family_network&.prefix}"

              - if address.errors[:ipv6_address_input].any? || address.errors[:offset].any?
                .w-full
                  %span.text-red-600= address.errors.to_hash.values_at(:ipv6_address_input, :offset).join ', '
          - else
            .opacity-60.leading-10 Automatically configured

        %div
          = form.label :dns_enabled, class: 'block font-bold text-gray-700 dark:text-gray-200' do
            %span.fa-layers.fa-fw.text-sm
              %i.fas.fa-database
              - unless address.dns_enabled?
                %i.fas.fa-slash.fa-rotate-90.font-bold
            = Address.human_attribute_name(:dns_enabled)
          %label.flex.items-center.cursor-pointer.justify-center.mt-3{class: 'mb-2.5'}
            = form.check_box :dns_enabled, class: 'sr-only peer', disabled:, id: "#{dom_id(address)}_dns_enabled"
            .relative.w-11.h-6.bg-gray-200.peer-focus:outline-none.peer-focus:ring-4.peer-focus:ring-blue-300.dark:peer-focus:ring-blue-800.rounded-full.peer.dark:bg-gray-700.peer-checked:after:translate-x-full.rtl:peer-checked:after:-translate-x-full.peer-checked:after:border-white.after:absolute.after:bg-white.after:border-gray-300.after:border.after:rounded-full.after:w-5.after:h-5.after:transition-all.dark:border-gray-600.peer-checked:bg-blue-600{class: "after:content-[''] after:top-[2px] after:start-[2px]"}

        %div
          = form.label :connection, class: 'block font-bold text-gray-700 dark:text-gray-200' do
            %i.fas.fa-satellite-dish.text-sm
            = Address.human_attribute_name(:connection)
          %label.flex.items-center.cursor-pointer.justify-center.mt-3{class: 'mb-2.5'}
            = form.check_box :connection, class: 'sr-only peer', disabled:, id: "#{dom_id(address)}_connection"
            .relative.w-11.h-6.bg-gray-200.peer-focus:outline-none.peer-focus:ring-4.peer-focus:ring-blue-300.dark:peer-focus:ring-blue-800.rounded-full.peer.dark:bg-gray-700.peer-checked:after:translate-x-full.rtl:peer-checked:after:-translate-x-full.peer-checked:after:border-white.after:absolute.after:bg-white.after:border-gray-300.after:border.after:rounded-full.after:w-5.after:h-5.after:transition-all.dark:border-gray-600.peer-checked:bg-blue-600{class: "after:content-[''] after:top-[2px] after:start-[2px]"}

        .opacity-0.group-hover:opacity-100.transition-opacity
          = link_to 'javascript:;', data: { action: "model#delete", turbo_confirm: 'Are you sure?' } do
            %i.fas.fa-times-circle.text-red-500
