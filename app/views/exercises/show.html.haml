.bg-white.dark:bg-gray-800.shadow.overflow-hidden.rounded-lg.mb-6
  .flex.items-center.justify-end.px-6.py-5
    %h3.flex-grow.text-lg.leading-6.text-gray-900.dark:text-gray-300
      Exercise information
    - if policy(@exercise).update?
      %hr.w-px.h-6.bg-gray-200.dark:bg-gray-400.dark:border-gray-400.mx-3.justify-self-end/
      = link_to 'Edit', [:edit, @exercise], class: 'text-indigo-600 hover:text-indigo-900 dark:text-indigo-400'

  .border-t.border-gray-200.dark:border-gray-500
    %dl
      .px-6.py-5.grid.grid-cols-12.gap-4
        .col-span-3
          %dt.text-sm.text-gray-500.dark:text-gray-400= Exercise.human_attribute_name(:abbreviation)
          %dd.mt-1.text-sm.text-gray-900.dark:text-white.mt-0= @exercise.abbreviation

        .col-span-3
          %dt.text-sm.text-gray-500.dark:text-gray-400= Exercise.human_attribute_name(:mode)
          %dd.mt-1.text-sm.text-gray-900.dark:text-white.mt-0= @exercise.mode.capitalize

        .col-span-3
          %dt.text-sm.text-gray-500.dark:text-gray-400= Exercise.human_attribute_name(:root_domain)
          %dd.mt-1.text-sm.text-gray-900.dark:text-white.mt-0= @exercise.root_domain

      .px-6.py-5
        %dt.text-sm.text-gray-500.dark:text-gray-400= Exercise.human_attribute_name(:description)
        %dd.mt-1.text-sm.text-gray-900.dark:text-white.mt-0.col-span-2= @exercise.description

      .py-1
        .border-t.border-gray-200.dark:border-gray-500

      .px-6.py-5.grid.grid-cols-12.gap-4
        .col-span-5
          %div
            %span.font-bold Inventory
            = render ModalComponent.new(header: "Network map", full_screen: true) do |c|
              - c.with_body do
                = turbo_frame_tag :exercise_map, loading: 'lazy', src: exercise_map_path(@exercise) do
                  Loading...
              = link_to 'Show map', 'javascript:;', class: 'text-xs text-indigo-600 hover:text-indigo-900 dark:text-indigo-400', data: { action: "click->modal#open" }

          .grid.grid-flow-col.gap-4.auto-cols-fr
            %div
              %dt.text-sm.text-gray-500 Virtual machines
              %dd.mt-1.text-sm.text-gray-900.dark:text-white.mt-0= policy_scope(@exercise.virtual_machines).size

            %div
              %dt.text-sm.text-gray-500 Virtual machine instances
              %dd.mt-1.text-sm.text-gray-900.dark:text-white.mt-0
                = policy_scope(@exercise.virtual_machines).map { |vm| vm.deploy_count * (vm.custom_instance_count || 1) }.sum

            %div
              %dt.text-sm.text-gray-500 Networks
              %dd.mt-1.text-sm.text-gray-900.dark:text-white.mt-0= @exercise.networks.size

        - cache(['resource', @exercise.virtual_machines.cache_key_with_version]) do
          - resource_usage = ExerciseResourceUsage.result_for(@exercise)
          .col-span-7
            .font-bold Resource usage

            .grid.grid-flow-col.gap-4.auto-cols-fr
              %div
                %dt.text-sm.text-gray-500= OperatingSystem.human_attribute_name(:cpu)
                %dd.mt-1.text-sm.text-gray-900.dark:text-white.mt-0= resource_usage.cpu

              %div
                %dt.text-sm.text-gray-500= OperatingSystem.human_attribute_name(:ram)
                %dd.mt-1.text-sm.text-gray-900.dark:text-white.mt-0
                  %span{title: "#{resource_usage.ram} GB"}= number_to_human_size resource_usage.ram*1024*1024*1024

              %div
                %dt.text-sm.text-gray-500= OperatingSystem.human_attribute_name(:primary_disk_size)
                %dd.mt-1.text-sm.text-gray-900.dark:text-white.mt-0
                  %span{title: "#{resource_usage.primary_disk_size} GB"}= number_to_human_size resource_usage.primary_disk_size*1024*1024*1024

%h1.text-2xl.font-bold.py-3.pb-6 Actors

= render TableComponent.new do |c|
  - c.with_column { Actor.human_attribute_name(:name) }
  - c.with_column { Actor.human_attribute_name(:abbreviation) }
  - c.with_column { Actor.human_attribute_name(:entries) }
  - c.with_column { Actor.human_attribute_name(:ui_color) }

  - @actors.each do |actor|
    - c.with_table_row do
      %td.px-6.py-4= actor.name
      %td.px-6.py-4= actor.abbreviation
      %td.px-6.py-4
        - if actor.numbering
          Numbering:
          %strong= actor.prefs.dig('numbered', 'count').to_i
          = "#{'team'.pluralize(actor.prefs.dig('numbered', 'count'))}, "
          %strong= actor.prefs.dig('numbered', 'dev_count').to_i
          = 'development team'.pluralize(actor.prefs.dig('numbered', 'dev_count'))

        - else
          %em (None)
      %td.px-6.py-4
        = render ActorChipComponent.new(actor:, text: 'Example')
