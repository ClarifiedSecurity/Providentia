%h1.text-2xl.font-bold.py-3.pb-6 Attached network interfaces

= render TableComponent.new do |c|
  - c.with_column { VirtualMachine.model_name.human }
  - c.with_column { 'IPv4 address' }
  - c.with_column { 'IPv6 address' }

  - sorted_used_addresses(@network).each do |vm, addresses|
    - c.with_table_row do
      %td.px-6.py-4= link_to vm.name, [vm.exercise, vm], class: 'text-indigo-600 hover:text-indigo-900 dark:text-indigo-400 dark:hover:text-indigo-200'
      - addresses.each do |group, address_list|
        %td.px-6.py-4
          - address_list&.each do |address|
            .block
              - if address.offset
                = render LiquidAddressComponent.new(object: address)
                - if address.vip?
                  %span.text-xs.rounded-full.mx-1.py-1.px-2.bg-cyan-100.text-cyan-500 Virtual IP
                = render SegmentDeployCountChipComponent.new(vm: vm, network: @network)
              - elsif !address.fixed?
                %em Dynamic addressing
              - else
                %em No assigned address
