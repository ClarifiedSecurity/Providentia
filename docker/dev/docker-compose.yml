version: "3"

name: providentia-dev
services:
  postgresql:
    image: "postgres:16-alpine"
    ports:
      - "5432:5432"
    volumes:
      - "postgres_providentia:/var/lib/postgresql/data"
      - ./initdb.sql:/docker-entrypoint-initdb.d/001-initdb.sql
    command: postgres -c shared_preload_libraries=pg_stat_statements -c pg_stat_statements.track=all
    environment:
      - PGUSER=providentia
      - POSTGRES_USER=providentia
      - POSTGRES_PASSWORD=secret
      - POSTGRES_DB=providentia
    healthcheck:
      test:
        [
          "CMD-SHELL",
          "pg_isready",
          "-q",
          "-d",
          "providentia",
          "-U",
          "providentia",
        ]
      interval: 5s
      timeout: 3s
      retries: 3

  keycloak:
    image: bitnami/keycloak:24.0.3
    depends_on:
      - postgresql
    environment:
      - KEYCLOAK_PROXY_ADDRESS_FORWARDING=true
      - KEYCLOAK_ADMIN_USER=admin
      - KEYCLOAK_ADMIN_PASSWORD=adminsecret
      - KEYCLOAK_MANAGEMENT_USER=mgmt
      - KEYCLOAK_MANAGEMENT_PASSWORD=mgmtsecret
      - KEYCLOAK_DATABASE_HOST=postgresql
      - KEYCLOAK_DATABASE_PORT=5432
      - KEYCLOAK_DATABASE_NAME=keycloak
      - KEYCLOAK_DATABASE_USER=keycloak
      - KEYCLOAK_DATABASE_PASSWORD=secret
      - KEYCLOAK_REALM=ruby
      - KEYCLOAK_CLIENT_URL=http://providentia.localhost
      - KEYCLOAK_CLIENT_ID=Providentia
      - KEYCLOAK_CLIENT_SECRET=00000000-0000-0000-0000-000000000000
      - KEYCLOAK_CLIENT_SCOPE=resources
    labels:
      caddy: keycloak.localhost:80
      caddy.reverse_proxy: "{{upstreams 8080}}"

  keycloak_config:
    image: adorsys/keycloak-config-cli:latest-24.0.1
    depends_on:
      - keycloak
    volumes:
      - ./providentia.yaml:/config/providentia.yaml
    environment:
      - KEYCLOAK_URL=http://keycloak:8080/
      - KEYCLOAK_USER=admin
      - KEYCLOAK_PASSWORD=adminsecret
      - KEYCLOAK_AVAILABILITYCHECK_ENABLED=true
      - KEYCLOAK_AVAILABILITYCHECK_TIMEOUT=30s
      - IMPORT_FILES='/config/*'

  web:
    depends_on:
      - "postgresql"
    build:
      context: ../../
      dockerfile: Dockerfile
      target: development
      args:
        CONTAINER_USER_ID:
        CONTAINER_GROUP_ID:
    tty: true
    stdin_open: true
    volumes:
      - /etc/ssl/certs/ca-certificates.crt:/etc/ssl/certs/ca-certificates.crt
      - ../../:/srv/app
    healthcheck:
      test: "wget -q 127.0.0.1:3000/healthz -O /dev/null"
      interval: 5s
      timeout: 5s
      retries: 20
    labels:
      caddy: providentia.localhost:80
      caddy.reverse_proxy: "{{upstreams 3000}}"
    environment:
      COREPACK_ENABLE_DOWNLOAD_PROMPT: 0
      SECRET_KEY_BASE: 0 # don't care in development mode
      VITE_RUBY_HOST: vite.localhost
      VITE_RUBY_PORT: 80
      VITE_RUBY_SKIP_PROXY: true
      DATABASE_URL: postgres://providentia:secret@postgresql/providentia?pool=5
      OIDC_ISSUER: http://keycloak.localhost/realms/Providentia
      OIDC_CLIENT_ID: Providentia
      OIDC_CLIENT_SECRET: 00000000-0000-0000-0000-000000000000
      OIDC_RESOURCE_PREFIX: Providentia_
      OIDC_RESOURCE_LOGIN: User
      OIDC_RESOURCE_SUPERADMIN: Super_Admin
      OIDC_RESOURCE_ENV_CREATOR: Environment_Creator
      OIDC_ENABLE_HTTP: true
      BASE_URI: http://providentia.localhost
      RUBY_GC_HEAP_INIT_SLOTS: 10000000
      RUBY_HEAP_SLOTS_INCREMENT: 1000000
      RUBY_HEAP_SLOTS_GROWTH_FACTOR: 1
      RUBY_GC_MALLOC_LIMIT: 100000000
      RUBY_HEAP_FREE_MIN: 5000000

  vite:
    depends_on:
      web:
        condition: service_healthy
    build:
      context: ../../
      dockerfile: Dockerfile
      target: development
      args:
        CONTAINER_USER_ID:
        CONTAINER_GROUP_ID:
    volumes:
      - ../../:/srv/app
    command: ["bin/vite", "dev"]
    environment:
      RAILS_ENV: development
      VITE_RUBY_HOST: 0.0.0.0
      VITE_RUBY_PORT: 80
    labels:
      caddy: vite.localhost:80
      caddy.reverse_proxy: "{{upstreams 80}}"

  caddy:
    image: lucaslorentz/caddy-docker-proxy:ci-alpine
    ports:
      - "80:80"
    networks:
      default:
        aliases:
          - caddy
          - keycloak.localhost
          - vite.localhost
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
      - caddy_data:/data
    restart: unless-stopped
    labels:
      caddy_0:
      caddy_0.auto_https: off
      # caddy_0.debug:

volumes:
  caddy_data:
  postgres_providentia:
  postgres_keycloak:
