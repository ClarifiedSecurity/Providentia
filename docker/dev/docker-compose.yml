name: providentia-dev
services:
  web:
    depends_on:
      postgresql:
        condition: service_healthy
      zitadel-configurator:
        condition: service_completed_successfully
    build:
      context: ../../
      dockerfile: Dockerfile
      target: development
      args:
        CONTAINER_USER_ID:
        CONTAINER_GROUP_ID:
    tty: true
    stdin_open: true
    volumes:
      - /etc/ssl/certs/ca-certificates.crt:/etc/ssl/certs/ca-certificates.crt:ro
      - ../../:/srv/app
    healthcheck:
      test: "wget -q 127.0.0.1:3000/healthz -O /dev/null"
      interval: 5s
      timeout: 5s
      retries: 20
    labels:
      caddy: providentia.*:80
      caddy.reverse_proxy: "{{upstreams 3000}}"
    environment:
      # don't care in development mode
      - SECRET_KEY_BASE=0

      - DATABASE_URL=postgres://providentia:secret@postgresql/providentia?pool=5
      - REDIS_URL=redis://redis:6379/0

      # authentication config
      # the client is dynamic and will be created by the terraform script
      - OIDC_ISSUER=http://${ZITADEL_DOMAIN:-zitadel.localhost}
      - OIDC_CLIENT_SECRET=00000000-0000-0000-0000-000000000000
      - OIDC_ENABLE_HTTP=true
      - OIDC_EXTRA_SCOPES=profile,email
      - OIDC_AUTHORIZATION_ROLES_CLAIM=urn:zitadel:iam:org:project:roles

      - BASE_URI=http://${PROVIDENTIA_DOMAIN:-providentia.localhost}

      - RUBY_GC_HEAP_INIT_SLOTS=10000000
      - RUBY_HEAP_SLOTS_INCREMENT=1000000
      - RUBY_HEAP_SLOTS_GROWTH_FACTOR=1
      - RUBY_GC_MALLOC_LIMIT=100000000
      - RUBY_HEAP_FREE_MIN=5000000

  postgresql:
    image: "postgres:17-alpine"
    volumes:
      - "postgres_data:/var/lib/postgresql/data"
    command: postgres -c shared_preload_libraries=pg_stat_statements -c pg_stat_statements.track=all
    configs:
      - source: initdb_providentia.sql
        target: /docker-entrypoint-initdb.d/001-initdb.sql
    environment:
      - PGUSER=${POSTGRES_USER:-postgres}
      - POSTGRES_USER=${POSTGRES_USER:-postgres}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD:-secret}
    healthcheck:
      test:
        [
          "CMD-SHELL",
          "pg_isready",
          "-q",
          "-d",
          "zitadel",
          "-U",
          "${POSTGRES_USER:-postgres}",
        ]
      interval: 5s
      timeout: 3s
      retries: 3

  zitadel:
    image: "ghcr.io/zitadel/zitadel:latest"
    command: 'start-from-init --masterkey "MasterkeyNeedsToHave32Characters" --tlsMode disabled'
    environment:
      ZITADEL_EXTERNALDOMAIN: ${ZITADEL_DOMAIN:-zitadel.localhost}
      ZITADEL_FIRSTINSTANCE_ORG_HUMAN_EMAIL_ADDRESS: zitadel-admin@localhost
      ZITADEL_FIRSTINSTANCE_ORG_HUMAN_PASSWORD: Password1!
      ZITADEL_FIRSTINSTANCE_ORG_HUMAN_PASSWORDCHANGEREQUIRED: false
      ZITADEL_FIRSTINSTANCE_MACHINEKEYPATH: /dynamic/zitadel-admin-sa.json
      ZITADEL_FIRSTINSTANCE_ORG_MACHINE_MACHINE_USERNAME: zitadel-admin-sa
      ZITADEL_FIRSTINSTANCE_ORG_MACHINE_MACHINE_NAME: Admin
      ZITADEL_FIRSTINSTANCE_ORG_MACHINE_MACHINEKEY_TYPE: 1
      ZITADEL_DATABASE_POSTGRES_HOST: postgresql
      ZITADEL_DATABASE_POSTGRES_PORT: 5432
      ZITADEL_DATABASE_POSTGRES_DATABASE: zitadel
      ZITADEL_DATABASE_POSTGRES_USER_USERNAME: zitadel
      ZITADEL_DATABASE_POSTGRES_USER_PASSWORD: zitadel
      ZITADEL_DATABASE_POSTGRES_USER_SSL_MODE: disable
      ZITADEL_DATABASE_POSTGRES_ADMIN_USERNAME: ${POSTGRES_USER:-postgres}
      ZITADEL_DATABASE_POSTGRES_ADMIN_PASSWORD: ${POSTGRES_PASSWORD:-secret}
      ZITADEL_DATABASE_POSTGRES_ADMIN_SSL_MODE: disable
      ZITADEL_EXTERNALSECURE: false
    depends_on:
      postgresql:
        condition: service_healthy
    volumes:
      - ./dynamic:/dynamic
    configs:
      - source: healthcheck.yaml
        target: /healthcheck.yaml
    healthcheck:
      test: ["CMD", "/app/zitadel", "ready", "--config", "/healthcheck.yaml"]
      interval: "10s"
      timeout: "5s"
      retries: 5
      start_period: "10s"
    labels:
      caddy: zitadel.*:80
      caddy.reverse_proxy: "h2c://{{upstreams 8080}}"

  zitadel-configurator:
    image: hashicorp/terraform:latest
    entrypoint:
      - /bin/sh
      - -c
    depends_on:
      zitadel:
        condition: service_healthy
    restart: on-failure:3
    environment:
      - TF_DATA_DIR=/terraformstate
      - TF_VAR_ZITADEL_LOCATION=${ZITADEL_DOMAIN:-zitadel.localhost}
    volumes:
      - terraformstate:/terraformstate
      - ./zitadel.tf:/main.tf
      - ./dynamic:/dynamic
    command:
      - |
        terraform init -input=false &&
        terraform apply -auto-approve -input=false

  caddy:
    image: lucaslorentz/caddy-docker-proxy:ci-alpine
    ports:
      - "80:80"
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
      - caddy_data:/data
    restart: unless-stopped
    networks:
      default:
        aliases:
          - caddy
          - ${ZITADEL_DOMAIN:-zitadel.localhost}
    labels:
      caddy_0:
      caddy_0.auto_https: off
      caddy_0.servers_0: :80
      caddy_0.servers_0.protocols: h1 h2c
      # caddy_0.debug:

volumes:
  caddy_data:
  postgres_data:
  terraformstate:

configs:
  initdb_providentia.sql:
    content: |
      CREATE USER providentia WITH PASSWORD 'secret';
      ALTER USER providentia CREATEDB;
      CREATE DATABASE providentia WITH OWNER providentia;

  healthcheck.yaml:
    content: |
      TLS:
        Enabled: false
