version: "3"

name: providentia
services:
  keycloak_db:
    image: "postgres:14-alpine"
    volumes:
      - "postgres_keycloak:/var/lib/postgresql/data"
    environment:
      - POSTGRES_USER=keycloak
      - POSTGRES_PASSWORD=secret
      - POSTGRES_DB=keycloak

  keycloak:
    image: bitnami/keycloak:21.1.1
    depends_on:
      - keycloak_db
    environment:
      - KEYCLOAK_PROXY_ADDRESS_FORWARDING=true
      - KEYCLOAK_ADMIN_USER=admin
      - KEYCLOAK_ADMIN_PASSWORD=adminsecret
      - KEYCLOAK_MANAGEMENT_USER=mgmt
      - KEYCLOAK_MANAGEMENT_PASSWORD=mgmtsecret
      - KEYCLOAK_DATABASE_HOST=keycloak_db
      - KEYCLOAK_DATABASE_PORT=5432
      - KEYCLOAK_DATABASE_NAME=keycloak
      - KEYCLOAK_DATABASE_USER=keycloak
      - KEYCLOAK_DATABASE_PASSWORD=secret
      - KEYCLOAK_REALM=ruby
      - KEYCLOAK_CLIENT_URL=http://providentia.localhost
      - KEYCLOAK_CLIENT_ID=Providentia
      - KEYCLOAK_CLIENT_SECRET=00000000-0000-0000-0000-000000000000
      - KEYCLOAK_CLIENT_SCOPE=resources
      - VIRTUAL_HOST=keycloak.localhost
      - VIRTUAL_PORT=8080

  keycloak_config:
    image: adorsys/keycloak-config-cli:latest-21.0.1
    depends_on:
      - keycloak
    volumes:
      - ./providentia.yaml:/config/providentia.yaml
    environment:
      - KEYCLOAK_URL=http://keycloak:8080/
      - KEYCLOAK_USER=admin
      - KEYCLOAK_PASSWORD=adminsecret
      - KEYCLOAK_AVAILABILITYCHECK_ENABLED=true
      - KEYCLOAK_AVAILABILITYCHECK_TIMEOUT=30s
      - IMPORT_FILES='/config/*'

  db:
    image: "postgres:14-alpine"
    volumes:
      - "postgres_providentia:/var/lib/postgresql/data"
    command: postgres -c shared_preload_libraries=pg_stat_statements -c pg_stat_statements.track=all
    environment:
      - POSTGRES_USER=providentia
      - POSTGRES_PASSWORD=secret
      - POSTGRES_DB=providentia

  redis:
    image: "redis:alpine"
    volumes:
      - "redis:/data"

  web:
    depends_on:
      - "db"
      - "redis"
    build:
      context: ../../
      dockerfile: Dockerfile
      target: development
    stdin_open: true
    tty: true
    volumes:
      - /etc/ssl/certs/ca-certificates.crt:/etc/ssl/certs/ca-certificates.crt
      - ../../:/srv/app
    entrypoint: ["/srv/app/docker/dev/docker-entrypoint.sh"]
    command: ["rails", "server", "-b", "0.0.0.0"]
    healthcheck:
      test: "curl -f localhost:3000"
      interval: 5s
      timeout: 5s
      retries: 20
    environment:
      VITE_RUBY_HOST: vite.localhost
      DATABASE_URL: postgres://providentia:secret@db/providentia?pool=5
      REDIS_URL: redis://redis:6379/0
      OIDC_ISSUER: http://keycloak.localhost/realms/Providentia
      OIDC_CLIENT_ID: Providentia
      OIDC_CLIENT_SECRET: 00000000-0000-0000-0000-000000000000
      OIDC_RESOURCE_PREFIX: Providentia_
      BASE_URI: http://providentia.localhost
      AUTH_MODE: resource_access
      VIRTUAL_HOST: providentia.localhost
      VIRTUAL_PORT: 3000
      RUBY_GC_HEAP_INIT_SLOTS: 10000000
      RUBY_HEAP_SLOTS_INCREMENT: 1000000
      RUBY_HEAP_SLOTS_GROWTH_FACTOR: 1
      RUBY_GC_MALLOC_LIMIT: 100000000
      RUBY_HEAP_FREE_MIN: 5000000
      # RUBY_YJIT_ENABLE: 1

  vite:
    depends_on:
      web:
        condition: service_healthy
    build:
      context: ../../
      dockerfile: Dockerfile
      target: development
    tty: true
    volumes:
      - ../../:/srv/app
    command: ["bin/vite", "dev"]
    environment:
      RAILS_ENV: development
      VITE_RUBY_HOST: 0.0.0.0
    networks:
      default:
        aliases:
          - vite
          - vite.localhost
    ports:
      - "3036:3036"

  omgwtfssl:
    image: paulczar/omgwtfssl
    restart: "no"
    volumes:
      - certs:/certs
    environment:
      - SSL_CERT=localhost.crt
      - SSL_KEY=localhost.key
      - SSL_SUBJECT=*.localhost

  nginx-proxy:
    image: nginxproxy/nginx-proxy
    ports:
      - "80:80"
      - "443:443"
    networks:
      default:
        aliases:
          - nginx-proxy
          - proxy
          - keycloak.localhost
    environment:
      - HTTPS_METHOD=noredirect
    volumes:
      - certs:/etc/nginx/certs
      - ${DOCKER_SOCKET_PATH:-/var/run/docker.sock}:/tmp/docker.sock:ro

volumes:
  redis:
  certs:
  postgres_providentia:
  postgres_keycloak:
